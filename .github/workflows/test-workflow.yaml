name: Build, Quality Analysis, and Security Scan

on:
  push:
    branches:
      - main

env:
  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

jobs:
  detect-changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    outputs:
      should-run-analysis: ${{ steps.changes.outputs.code }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect code changes
        uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            code:
              - 'src/**'
              - 'tests/**'
              - '*.py'
              - 'requirements.txt'

  build-and-analyze:
    name: Build and Analyze
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.should-run-analysis == 'true'
    timeout-minutes: 30
    permissions:
      pull-requests: write
      contents: read
      security-events: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Validate SonarQube configuration
        run: |
          if [[ -z "${{ env.SONAR_TOKEN }}" ]]; then
            echo "::error::SONAR_TOKEN is not set"
            exit 1
          fi
          if [[ -z "${{ env.SONAR_HOST_URL }}" ]]; then
            echo "::error::SONAR_HOST_URL is not set"
            exit 1
          fi
        shell: bash

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          if [[ -f "requirements.txt" ]]; then
            pip install -r requirements.txt
          fi
        shell: bash

      - name: Run tests with coverage
        run: |
          if [[ -f "requirements.txt" ]]; then
            python -m pytest --cov=. --cov-report=xml || echo "Tests failed or no pytest config"
          fi
        shell: bash
        continue-on-error: false

      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v5
        env:
          SONAR_TOKEN: ${{ env.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ env.SONAR_HOST_URL }}
        with:
          args: >
            -Dsonar.projectKey=${{ github.repository }}
            -Dsonar.projectName=${{ github.event.repository.name }}
            -Dsonar.sources=src
            -Dsonar.tests=tests
            -Dsonar.coverage.exclusions=**/*test*/**,**/*spec*/**
            -Dsonar.cpd.exclusions=**/*test*/**,**/*spec*/**

      - name: SonarQube Quality Gate Check
        uses: SonarSource/sonarqube-quality-gate-action@v1
        id: quality-gate
        timeout-minutes: 10
        env:
          SONAR_TOKEN: ${{ env.SONAR_TOKEN }}
        continue-on-error: true

      - name: Retry Quality Gate Check
        if: steps.quality-gate.outcome == 'failure'
        uses: SonarSource/sonarqube-quality-gate-action@v1
        timeout-minutes: 5
        env:
          SONAR_TOKEN: ${{ env.SONAR_TOKEN }}

      - name: Upload SonarQube results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: sonarqube-results
          path: |
            .scannerwork/
            coverage.xml
            test-results.xml
          retention-days: 30

      - name: Generate Analysis Summary
        if: always()
        run: |
          echo "## 🔍 SonarQube Analysis Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Repository:** ${{ github.repository }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch/PR:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Quality Gate:** ${{ steps.quality-gate.outcome == 'success' && '✅ Passed' || '❌ Failed' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Analysis URL:** ${{ env.SONAR_HOST_URL }}/dashboard?id=${{ github.repository }}" >> $GITHUB_STEP_SUMMARY

  security-scan:
    name: Security Scan with CodeQL
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.should-run-analysis == 'true'
    timeout-minutes: 30
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      matrix:
        language: ['python']

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          # Uncomment to add advanced query packs
          # queries: security-extended, security-and-quality

      - name: Autobuild (optional for compiled languages)
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{ matrix.language }}"
